#border {

  /**
   * Solid Borders
   */

  .solid(@size: 1px, @color: black) when (default()) {
    border: @size solid @color;
  }

  .solid(@type, @size: 1px, @color: black) when (@type = horizontal) {
    border-top: @size solid @color;
    border-bottom: @size solid @color;
  }

  .solid(@type, @size: 1px, @color: black) when (@type = vertical) {
    border-left: @size solid @color;
    border-right: @size solid @color;
  }

  .solid(@type, @size: 1px, @color: black) when (@type = top) {
    border-top: @size solid @color;
  }

  .solid(@type, @size: 1px, @color: black) when (@type = bottom) {
    border-bottom: @size solid @color;
  }

  .solid(@type, @size: 1px, @color: black) when (@type = left) {
    border-left: @size solid @color;
  }

  .solid(@type, @size: 1px, @color: black) when (@type = right) {
    border-right: @size solid @color;
  }


  /**
   * Dotted Borders
   */

  .dotted(@size: 1px, @color: black) when (default()) {
    border: @size dotted @color;
  }

  .dotted(@type, @size: 1px, @color: black) when (@type = horizontal) {
    border-top: @size dotted @color;
    border-bottom: @size dotted @color;
  }

  .dotted(@type, @size: 1px, @color: black) when (@type = vertical) {
    border-left: @size dotted @color;
    border-right: @size dotted @color;
  }

  .dotted(@type, @size: 1px, @color: black) when (@type = top) {
    border-top: @size solid @color;
  }

  .dotted(@type, @size: 1px, @color: black) when (@type = bottom) {
    border-bottom: @size dotted @color;
  }

  .dotted(@type, @size: 1px, @color: black) when (@type = left) {
    border-left: @size dotted @color;
  }

  .dotted(@type, @size: 1px, @color: black) when (@type = right) {
    border-right: @size dotted @color;
  }


  /**
   * Dashed Borders
   */

  .dashed(@size: 1px, @color: black) when (default()) {
    border: @size dashed @color;
  }

  .dashed(@type, @size: 1px, @color: black) when (@type = horizontal) {
    border-top: @size dashed @color;
    border-bottom: @size dashed @color;
  }

  .dashed(@type, @size: 1px, @color: black) when (@type = vertical) {
    border-left: @size dashed @color;
    border-right: @size dashed @color;
  }

  .dashed(@type, @size: 1px, @color: black) when (@type = top) {
    border-top: @size dashed @color;
  }

  .dashed(@type, @size: 1px, @color: black) when (@type = bottom) {
    border-bottom: @size dashed @color;
  }

  .dashed(@type, @size: 1px, @color: black) when (@type = left) {
    border-left: @size dashed @color;
  }

  .dashed(@type, @size: 1px, @color: black) when (@type = right) {
    border-right: @size dashed @color;
  }

  /**
   * Border Radius Control
   */

  .radius(@size: @settings[radius]) {
    border-radius: @size;
  }

  .radius(@type, @size: @settings[radius]) when (@type = top) {
    border-top-left-radius: @size;
    border-top-right-radius: @size;
  }

  .radius(@type, @size: @settings[radius]) when (@type = bottom) {
    border-bottom-left-radius: @size;
    border-bottom-right-radius: @size;
  }

  .radius(@type, @size: @settings[radius]) when (@type = left) {
    border-top-left-radius: @size;
    border-bottom-left-radius: @size;
  }

  .radius(@type, @size: @settings[radius]) when (@type = right) {
    border-top-right-radius: @size;
    border-bottom-right-radius: @size;
  }
}